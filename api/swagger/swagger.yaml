swagger: '2.0'

## API Information
info:
  version: '0.0.4'
  title: "Simple öV booking API"
  description: "A simple API to book öV tickets in Switzerland."
  contact:
    name: Team SVS Vertrieb
    email: andreas.schlapbach@sbb.ch
    url: http://api.sbb.ch/booking
  license:
    name: SBB
    url: https://data.sbb.ch/page/licence/
#host: api.sbb.ch
#host: localhost:8080
basePath: /booking
schemes:
  - http # Nur am Anfang
  - https
consumes:
  - application/json
produces:
  - application/json
  - application/pdf

## Security
#securityDefinitions:
#  oauth:
#    type: oauth2
#    flow: implicit
#    authorizationUrl: https://xyz #To clarify
#    scopes:
#      basic: |
#       to read any and all data related to the B2P API
#security:
#  - oauth:
#    - basic

## Paths
paths:

  /ping/{message}:
    x-swagger-router-controller: ping
    get:
      description: "Returns the message sent."
      operationId: getPing
      parameters:
        - name: message
          in: path
          description: "The message sent."
          required: true
          type: string
          default: 'hello'
      responses:
        200:
          description: "The message replied."
          schema:
            type: string
        default:
          description: "unexpected error"

  ### Fahrplan Part

  # ToDo: Define properly with Team VTP

  /locations/:
    x-swagger-router-controller: standorte
    get:
      description: "The location.name service can be used to perform a pattern matching of a user input and to retrieve a list of possible matches in the journey planner database. Possible matches might be stops/stations, points of interest and addresses. For reasons of backward compati-bility the service name location can be used as an alias for location.name.\n

        The result is a list of possible matches (locations) where the user might pick one entry to per-form a trip request with this
        location as origin or destination or to ask for a departure board or arrival board of this location (stops/stations only)"
      operationId: getStandorte
      parameters:
        - name: input
          in: query
          description: "Search for that token."
          required: true
          type: string
          default: 'Bern'
      responses:
        200:
          description: "A list of stop locations."
          schema:
            type: array
            items:
              $ref: '#/definitions/location'
        default:
          description: "unexpected error"

  # ToDo: Define properly with Team VTP

  /trips/:
    x-swagger-router-controller: verbindungen
    get:
      description:
        'The trip service calculates a trip from a specified origin to a specified destination. These might be stop/station IDs or coordinates based on addresses and points of interest validated by the location service or coordinates freely defined by the client.'
      operationId: getVerbindungen
      parameters:
        - name: originExtId
          in: query
          description: "Specifies the external station/stop ID of the origin for the trip.
Such ID can be retrieved from the location.name or loca-tion.nearbystops services."
          type: integer
          default: 8507000

      # ToDo: Get right later
      #  - viaCodes:
      #    type: array
      #    items:
      #      name: viaCode
      #      in: query
      #      description: "Via Ort als UIC Code"
      #      type: integer

        - name: destExtId
          description: "Specifies the external station/stop ID of the destination for the trip.
Such ID can be retrieved from the location.name or loca-tion.nearbystops services."
          in: query
          type: integer
          default: 8508500
        - name: date
          in: query
          description: "Sets the departure date for the search."
          type: string
          format: date
          default: '2017-01-14'
        - name: time
          in: query
          description: "Sets the departure time for the search."
          type: string
          format: dateTime
          default: '20:22'
      responses:
        200:
          description: "Returns a list of trips."
          schema:
            type: array
            items:
              $ref: '#/definitions/trip'
        default:
          description: "unexpected error"


  ### Vertriebs Part

  /angebote/:
    x-swagger-router-controller: angebote
    get:
      description: "Hole Angebote für einen Strecken basiserten Reisewunsch."
      operationId: getAngebote
      parameters:

        - name: vonUICode
          in: query
          description: "Abfahrtsort als UIC Code"
          type: integer
          default: 8507000

      # ToDo: Get right later
      #  - viaCodes:
      #    type: array
      #    items:
      #      name: viaCode
      #      in: query
      #      description: "Via Ort als UIC Code"
      #      type: integer

        - name: nachUICode
          description: "Ankunftsort als UIC Code"
          in: query
          type: integer
          default: 8508500
        - name: datum
          in: query
          description: "Datum"
          type: string
          format: date
          default: '2017-01-14'
        - name: zeit
          in: query
          description: "Zeit"
          type: string
          format: dateTime
          default: '20:22'

      # ToDo; Scale for more than one traveller
        - name: alter
          in: query
          description: 'Alter des Reisenden'
          type: integer
          default: 42
        - name: ermaessigung
          in: query
          description: 'Ermaessigung: {GA. Halbtax}'
          type: string
          default: 'halbtax'
          enum:
           - keine
           - ga
           - halbtax
      responses:
        200:
          description: "Eine Liste von Angeboten"
          schema:
            type: array
            items:
              $ref: '#/definitions/angebot'
        default:
          description: "unexpected error"

    post:
      description: "Vorabbucht das Angebot und erstellt eine Vorabbuchung."
      operationId: postAngebote
      parameters:
         - name: angebotsId
           in: body
           description: "Das zu vorabbuchende Angebot"
           required: true
           schema:
              $ref: '#/definitions/angebotsId'
      responses:
        200:
          description: "Angebot gebucht"
          schema:
            $ref: '#/definitions/buchung'
        default:
          description: "unexpected error"

  /preise/:
    x-swagger-router-controller: preise
    get:
      description: "holt den Preis anhand von BPUIC (vonUICode, nachUICode, ViaUICode, Datum, Zeit)) und macht keine Buchung und für eine Person (Default 1/2 Preis Erwachsen)"
      operationId: getPreise
      parameters:
        - name: vonUICode
          in: query
          description: "Abfahrtsort als UIC Code"
          type: integer
          default: 8507000

      # ToDo: Get right later
      #  - viaCodes:
      #    type: array
      #    items:
      #      name: viaCode
      #      in: query
      #      description: "Via Ort als UIC Code"
      #      type: integer

        - name: nachUICode
          description: "Ankunftsort als UIC Code"
          in: query
          type: integer
          default: 8508500
        - name: datum
          in: query
          description: "Datum"
          type: string
          format: date
          default: '2017-01-14'
        - name: zeit
          in: query
          description: "Zeit"
          type: string
          format: dateTime
          default: '20:22'

      # ToDo; Scale for more than one traveller
        - name: alter
          in: query
          description: 'Alter des Reisenden'
          type: integer
          default: 42
        - name: ermaessigung
          in: query
          description: 'Ermaessigung: {GA. Halbtax}'
          type: string
          default: 'halbtax'
          enum:
           - keine
           - ga
           - halbtax
      responses:
        200:
          description: "Eine Liste von Preisen"
          schema:
            type: array
            items:
              $ref: '#/definitions/preis'
        default:
          description: "unexpected error"


  /buchungen/{buchungsId}:
    x-swagger-router-controller: buchungen
    get:
      description: "Hole die Buchung"
      operationId: getBuchung
      parameters:
        - name: buchungsId
          in: path
          description: "Id einer Vorabbuchung"
          required: true
          type: string
          default: "B1" # for simplier mock testing only
      responses:
        200:
          description: "Die Buchung"
          schema:
            $ref: '#/definitions/buchung'
        default:
          description: "unexpected error"

  /buchungen/{buchungsId}/annullieren:
    x-swagger-router-controller: buchungen
    get:
      description: "Annuliere die Buchung"
      operationId: getBuchungAnnullieren
      parameters:
        - name: buchungsId
          in: path
          description: "Id einer Buchung"
          required: true
          type: string
          default: "B1" # for simplier mock testing only
      responses:
        200:
          description: "Buchung annulliert"
          schema:
            type: string
        default:
          description: "unexpected error"

  /billette/{buchungsId}:
    x-swagger-router-controller: billette
    get:
      description: "Hole das Billett"
      operationId: getBillette
      parameters:
        - name: buchungsId
          in: path
          description: "Id einer Buchung"
          required: true
          type: string
          default: "B1" # for simplier mock testing only
        - name: typ
          description: "Typ des Billetts: {pdf, screen}"
          in: query
          type: string
          default: 'pdf'
          enum:
            - pdf
            - screen
      responses:
        200:
          description: "Billett"
        default:
          description: "unexpected error"

## Definitions

definitions:

  location:
    type: object
    required:
      - extId
      - name
      - lon
      - lat
    properties:
      extId:
        description: 'UIC code of the location.'
        type: string
        default: '008507785'
      name:
        description: 'Name of the location.'
        type: string
        default: 'Bern Hauptbahnhof'
      lon:
        description: 'Longitude of centre coordinate.'
        type: number
        format: double
        default: 7.439122
      lat:
        description: 'Latitude of centre coordinate.'
        type: number
        format: double
        default: 46.948825

  # ToDo: Refine properly with Team VTP
  trip:
    type: object
    required:
      - verbindungsId
    properties:
      verbindungsId:
        description: "Id einer Verbindung (ReconstructionContext)"
        type: string
      zugNummer:
        description: "Zugnummer"
        type: string
      abfahrtsOrt:
        description: "Abfahrtsort"
        type: string
      abfahrtsDatum:
        description: "Abfahrtsdatum"
        type: string
        format: date
      abfahrtsZeit:
        description: "Abfahrtszeit"
        type: string
        format: dateTime
      ankunftsOrt:
        description: "Ankunftsort"
        type: string
      ankunftsDatum:
        description: "Ankunftsdatum"
        type: string
        format: date
      ankunftsZeit:
        description: "Ankunftszeit"
        type: string
        format: dateTime
      links:
        type: array
        items:
          $ref: '#/definitions/leg'

  leg:
    type: object
    required:
      - originName
      - originDate
      - originTime
      - destinationName
      - destinationDate
      - destinationTime
    properties:
      originName:
        description: "The name of the origin for the trip."
        type: string
      originDate:
        description: 'The date of the departure at the destination.'
        type: string
        format: date
      originTime:
        description: 'The time of the departure at the destination.'
        type: string
        format: dateTime
      destinationName:
        description: "The name of the destination for the trip."
        type: string
      destinationDate:
        description: 'The date of the arrival at the destination.'
        type: string
        format: date
      destinationTime:
        description: 'The time of the arrival at the destination.'
        type: string
        format: dateTime

  preis:
    type: object
    required:
      - preis
    properties:
      preis:
        description: "Preis der Strecke"
        type: integer

  angebot:
    type: object
    required:
      - angebotsId
      - beschreibung
      - preis
    properties:
      angebotsId:
        description: "Id eines Angebotes"
        type: string
      beschreibung:
        description: "Beschreibung des Angebotes"
        type: string
      preis:
        description: "Preis des Angebotes"
        type: integer
      links:
        type: array
        items:
          $ref: '#/definitions/link'

  angebotsId:
    type: object
    required:
      - angebotsId
    properties:
      angebotsId:
        description: "Id eines Angebotes"
        type: string
        default: "A1" # for simplier mock testing only

  buchung:
    type: object
    required:
     - buchungsId
    properties:
      buchungsId:
        description: "Id einer Buchung"
        type: string
      beschreibung:
        description: "Beschreibung der Buchung"
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/link'



  ### REST level 3 support

  link:
    type: object
    required:
     - rel
     - href
    properties:
      rel:
        type: string
        description: "Aktion"
      href:
        type: string
        description: "URL zu Auslösung der Aktion"
