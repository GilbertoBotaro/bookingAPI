# @Author: Andreas Schlapbach <schlpbch>
# @Date:   2017-04-07T17:04:50+02:00
# @Email:  andreas.schlapbach@sbb.ch
# @Last modified time: 2017-05-24T21:04:49+02:00
# @License: ALv2
# @Copyright: 2017 Schweizerische Bundesbahnen (SBB)

swagger: '2.0'

## API Information
info:
  version: '0.0.11'
  title: "Simple booking API for public transport"
  description: "A simple API to book tickets for public transport in Switzerland."
  contact:
    name: Team SVS Vertrieb
    email: andreas.schlapbach@sbb.ch
    url: http://booking.sbb.ch/
  license:
    name: SBB
    url: http://booking.sbb.ch/app/LICENSE.txt
#host: api.sbb.ch
#host: localhost:8080
basePath: /api
schemes:
  - http # Nur am Anfang
  - https
consumes:
  - application/json
produces:
  - application/json
  - application/hal+json
  - application/pdf

## Security
#securityDefinitions:
#  oauth:
#    type: oauth2
#    flow: implicit
#    authorizationUrl: https://xyz #To clarify
#    scopes:
#      basic: |
#       to read any and all data related to the B2P API
#security:
#  - oauth:
#    - basic

## Paths
paths:

  /health/status:
    x-swagger-router-controller: health
    get:
      description:
        'The status service can be used to check if the remote server is running
        and can be reached across the network.'

      operationId: status
      responses:
        200:
          description: "The reply from the server."
          schema:
            type: string
        default:
          description: "unexpected error"

  ### Trip Planning Part

  /locations:
    x-swagger-router-controller: locations
    get:
      description:
        'The locations service can be used to perform a pattern-based search to
        retrieve a list of matching locations in the journey planner database.
        Possible matches might be stations, points of interest and addresses.<br><br>

        The result is a list of matching locations which can be used as origin
        and destination in trip and departure/arrival board requests.'

      operationId: locations
      parameters:
        - name: input
          in: query
          description: "Token to search for locations."
          required: true
          type: string
          default: 'Bern'
      responses:
        200:
          description: "A list of locations."
          schema:
            type: array
            items:
              $ref: '#/definitions/location'
        default:
          description: "unexpected error"

  /trips:
    x-swagger-router-controller: trips
    get:
      description:
        'The trips service calculates different trips for a specified origin
        and destination. The external ids for origin and destination can be
        retrieved with the locations service.'

      operationId: trips
      parameters:
        - name: originId
          in: query
          description: "The id of the origin of the trip."
          required: true
          type: integer
          default: 8507000
        - name: destinationId
          description: "The id of the destination of the trip."
          required: true
          in: query
          type: integer
          default: 8508500
        - name: date
          in: query
          description: "The desired departure date."
          required: true
          type: string
          format: date
          default: '2017-01-14'
        - name: time
          in: query
          description: "The desired departure time."
          required: true
          type: string
          format: dateTime
          default: '20:22'

      responses:
        200:
          description: "A list of possible trips matching the specified travel wishes."
          schema:
            type: array
            items:
              $ref: '#/definitions/trip'
        default:
          description: "unexpected error"


  ### Booking Part

  /prices:
      x-swagger-router-controller: prices
      get:
        description:
          'The price service calculates the cheapest prices for an adult with
          half-fare reduction and a specified origin and destination.
          The external ids for origin and destination can be retrieved
          with the locations service.<br><br>

          Either the "tripId" or "originId", "destinationId", "date", and "time"
          must be defined.'

        operationId: prices
        parameters:
          - name: originId
            in: query
            description: "The id of the origin."
            required: false
            type: integer
            default: 8507000
          - name: destinationId
            description: "The id of the destination."
            required: false
            in: query
            type: integer
            default: 8508500
          - name: date
            in: query
            description: "The desired departure date."
            required: false
            type: string
            format: date
            default: '2017-01-14'
          - name: time
            in: query
            description: "The desired departure time."
            required: false
            type: string
            format: datetime
            default: '20:04'
          - name: tripId
            in: query
            description: "The id of a trip."
            required: false
            type: string
        responses:
          200:
            description: "A list of prices for the trip."
            schema:
              type: array
              items:
                $ref: '#/definitions/price'
          default:
            description: "unexpected error"

  /offers:
    x-swagger-router-controller: offers
    get:
      description:
        'The offers service calculates offers for a specified origin
        and destination. The external ids for origin and destination can
        be retrieved with the locations service.<br><br>

        Either the "tripId" or "originId", "destinationId", "date", and "time"
        must be defined.'

      operationId: offers
      parameters:
        - name: originId
          in: query
          description: "The id of the origin."
          required: false
          type: integer
          default: 8507000
        - name: destinationId
          description: "The id of the destination."
          required: false
          in: query
          type: integer
          default: 8508500
        - name: date
          in: query
          description: "The desired departure date."
          required: false
          type: string
          format: date
          default: '2017-01-14'
        - name: time
          in: query
          description: "The desired departure time."
          required: false
          type: string
          format: datetime
          default: '20:04'
      # ToDo; Scale for more than one traveller
        - name: age
          in: query
          description: 'Age of the traveller.'
          type: integer
          default: 42
          minimum: 0
          maximum: 120
        - name: reduction
          in: query
          description: 'Reductions that can be applied'
          type: string
          default: 'half-fare-2nd'
          enum:
           - none
           - half-fare-2nd
           - half-fare-1st
           - ga-2nd
           - ga-1st
        - name: productId
          in: query
          description: "The productId identifying the product"
          type: string
          required: false
        - name: tripId
          in: query
          description: "The id of a trip."
          required: false
          type: string

      responses:
        200:
          description: "A list of offers."
          schema:
            type: array
            items:
              $ref: '#/definitions/offer'
        default:
          description: "unexpected error"

  /offers/{offerId}/prebook:
    x-swagger-router-controller: prebookings
    get:
      description:
        'Prebook an offer during checkout process for 15 minutes. Normally
        called when adding an item to the shopping cart.'

      operationId: prebook
      parameters:
        - name: offerId
          in: path
          description: "The offer ID to be pre-booked for later booking."
          required: true
          type: string
          default: '1001' # for simpler mock testing only
      responses:
        200:
          description: "The pre-booked offer."
          schema:
            $ref: '#/definitions/prebook'
        default:
          description: "unexpected error"

  /prebookings/{prebookingId}/confirm:
    x-swagger-router-controller: bookings
    get:
      description:
        'Book the pre-booked offer.'
      operationId: confirm
      parameters:
        - name: prebookingId
          in: path
          description: "The pre-book ID to be booked."
          required: true
          type: string
          default: '2001' # for simpler mock testing only
      responses:
        200:
          description: "The booked offer."
          schema:
            $ref: '#/definitions/book'
        default:
          description: "unexpected error"

  /bookings/{bookingId}/fulfil:
    x-swagger-router-controller: bookings
    get:
      description:
        'Fulfill the booking which traditionally means producing a tickets.
        However other ways of fullfilment are possible such as storing the
        booking on a central database. In this case only a reference to the
        booking is returned.'

      operationId: fulfil
      parameters:
        - name: bookingId
          in: path
          description: "The booking ID."
          required: true
          type: string
          default: '3001' # for simpler mock testing only
        - name: type
          description: "Type of the tickets: {pdf, png}"
          in: query
          type: string
          default: 'pdf'
          enum:
            - pdf
            - png
      responses:
        200:
          description: "The booked tickets."
        default:
          description: "unexpected error"

  /bookings/{bookingId}/cancel:
    x-swagger-router-controller: bookings
    get:
      description:
        'Cancel the booking (technical; not for refunding).'
      operationId: cancel
      parameters:
        - name: bookingId
          in: path
          description: "Booking ID to cancel."
          required: true
          type: string
          default: '3001' # for simpler mock testing only
      responses:
        200:
          description: "The canceled booking ID."
          schema:
            type: string
        default:
          description: "unexpected error"

  /bookings/{bookingId}/refund:
    x-swagger-router-controller: bookings
    get:
      description:
        'Refund the booking. Two types of refund are to be supported, full and
        partial.

        ToDo: Fully specify (alias,...).'

      operationId: refund
      parameters:
        - name: bookingId
          in: path
          description: "Booking ID to refund."
          required: true
          type: string
          default: '3001' # for simpler mock testing only
        - name: type
          description: "Type of refund: {full, partial}"
          in: query
          type: string
          default: "full"
          enum:
           - full
           - partial # todo: define properly
      responses:
        200:
          description: "The refunded booking ID."
          schema:
            type: string
        default:
          description: "unexpected error"

## Definitions

definitions:
  location:
    type: object
    required:
      - id
      - name
      - lon
      - lat
      - type
    properties:
      id:
        description: 'UIC code of the location.'
        type: string
        default: '8507785'
      name:
        description: 'Name of the location.'
        type: string
        default: 'Bern Hauptbahnhof'
      lon:
        description: 'Longitude of centre coordinate.'
        type: number
        format: double
        default: 7.439122
      lat:
        description: 'Latitude of centre coordinate.'
        type: number
        format: double
        default: 46.948825
      type:
        description: 'Type of the location.'
        type: string
        default: 'STATION'
      _links:
        type: array
        items:
          $ref: '#/definitions/link'

  # ToDo: Refine properly with Team VTP
  trip:
    type: object
    required:
      - tripId
    properties:
      tripId:
        description: "Id of a trip"
        type: string
      trips:
        type: array
        items:
          $ref: '#/definitions/leg'
      _links:
        type: array
        items:
          $ref: '#/definitions/link'

  leg:
    type: object
    required:
      - origin
      - destination
    properties:
      origin:
        $ref: '#/definitions/stop'
      destination:
        $ref: '#/definitions/stop'

  stop:
    type: object
    required:
      - id
      - name
      - date
      - time
    properties:
      id:
        description: 'The UIC code of the stop.'
        type: string
        default: '8507785'
      name:
        description: 'The name of the stop.'
        type: string
        default: 'Bern'
      date:
        description: 'The date of the departure/arrival.'
        type: string
        format: date
        default: '2017-01-14'
      time:
        description: 'The time of the departure/arrival.'
        type: string
        format: dateTime
        default: '20:14'

  price:
    type: object
    required:
      - normalPrices
      - _links
    properties:
      normalPrices:
        description: 'Includes the normal fare prices of a trip for second and
          first class with and without half-fare reduction. Thus, in total four
          prices are returned. The prices are in Swiss cents.'
        type: array
        items:
          type: integer
      superSaverPrices:
        description: 'Includes the super fare prices of a trip for second and
          first class with and without half-fare reduction. Thus, in total four
          prices are returned. The prices are in Swiss cents.'
        type: array
        items:
          type: integer
      _links:
        $ref: '#/definitions/price_links'

  price_links:
    type: object
    required:
      - self
    properties:
     self:
       $ref: '#/definitions/uri'

  offer:
    type: object
    required:
      - offerId
      - description
      - price
      - qualityOfService
    properties:
      offerId:
        description: "ID of the offer for pre-booking."
        type: string
        default: '1001'
      description:
        description: "Description of the offer."
        type: string
      price:
        description: "Price of the offer."
        type: integer
        default: 22
      qualityOfService:
        description: "Quality of service of the offer."
        type: string
        default: '2nd'
        enum:
         - 'none'
         - '1st'
         - '2nd'
      _links:
        $ref: '#/definitions/offer_links'

  offer_links:
    type: object
    required:
      - self
      - prebook
    properties:
      self:
        $ref: '#/definitions/uri'
      prebook:
        $ref: '#/definitions/uri'

  prebook:
    type: object
    required:
     - prebookingId
    properties:
      prebookingId:
        description: "ID of the pre-booked offer."
        type: string
        default: '2001'
      description:
        description: "Description of the pre-booked offer."
        type: string
      _links:
        $ref: '#/definitions/prebook_links'

  prebook_links:
    type: object
    required:
      - self
      - book
    properties:
      self:
        $ref: '#/definitions/uri'
      book:
        $ref: '#/definitions/uri'

  book:
    type: object
    required:
     - bookingId
    properties:
      bookingId:
        description: "Id of the booking"
        type: string
        default: '3001'
      description:
        description: "Description of the booked offer."
        type: string
      _links:
        $ref: '#/definitions/book_links'

  book_links:
    type: object
    required:
      - self
      - fulfil
      - cancel
    properties:
      self:
        $ref: '#/definitions/uri'
      fulfil:
        $ref: '#/definitions/uri'
      cancel:
        $ref: '#/definitions/uri'


  ### REST level 3 support

  uri:
    type: object
    required:
      - href
    properties:
      href:
        type: string

  link:
    type: object
    required:
     - rel
     - href
    properties:
      rel:
        type: string
        description: "Action"
      href:
        type: string
        description: "URL to execute the action"
